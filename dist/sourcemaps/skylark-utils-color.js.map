{"version":3,"sources":["skylark-utils-color.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","inputToRGB","color","rgb","r","g","b","a","ok","format","stringInputToObject","rgbToRgb","String","substr","s","convertToPercentage","v","hsvToRgb","h","l","hslToRgb","boundAlpha","mathMin","mathMax","bound01","rgbToHsl","max","min","d","hue2rgb","p","q","t","rgbToHsv","math","floor","f","mod","rgbToHex","allow3Char","hex","pad2","mathRound","toString","charAt","rgbaToHex","convertDecimalToHex","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","clamp01","val","parseIntFromHex","indexOf","c","Math","round","convertHexToDecimal","replace","trimLeft","trimRight","toLowerCase","named","names","match","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","hex6","hex3","colors","random","CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","mixin","desaturate","amount","Color","toHsl","saturate","greyscale","lighten","brighten","toRgb","darken","spin","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","monochromatic","toHsv","modification","tinyCounter","mathRandom","klass","init","opts","this","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","setAlpha","value","toHsvString","toHslString","toHex","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","needsAlphaFormat","_applyModification","fn","concat","slice","call","arguments","_applyCombination","fromRatio","newColor","equals","color1","color2","mix","w1","rgb1","rgb2","w","w2","readability","c1","c2","brightnessA","brightnessB","colorDiff","brightness","isReadable","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","readable","score","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flip","o","flipped","main"],"mappings":"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","file":"../skylark-utils-color.js","sourcesContent":["define('skylark-utils-color/colors',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n],function(skylark,langx) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var colors = skylark.colors =  skylark.colors || {};\r\n\r\n    var trimLeft = /^[\\s,#]+/,\r\n        trimRight = /\\s+$/,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    function inputToRGB(color) {\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = stringInputToObject(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb = hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        a = boundAlpha(a);\r\n\r\n        return {\r\n            ok: ok,\r\n            format: color.format || format,\r\n            r: mathMin(255, mathMax(rgb.r, 0)),\r\n            g: mathMin(255, mathMax(rgb.g, 0)),\r\n            b: mathMin(255, mathMax(rgb.b, 0)),\r\n            a: a\r\n        };\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n    // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function stringInputToObject(color) {\r\n\r\n        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    langx.mixin(colors,{\r\n        inputToRGB : inputToRGB,\r\n        rgbToRgb : rgbToRgb,\r\n        rgbToHsl : rgbToHsl,\r\n        hslToRgb : hslToRgb,\r\n        rgbToHsv : rgbToHsv,\r\n        rgbToHex : rgbToHex,\r\n        rgbaToHex : rgbaToHex,\r\n        boundAlpha : boundAlpha,\r\n        bound01 : bound01,\r\n        clamp01 : clamp01,\r\n        parseIntFromHex : parseIntFromHex,\r\n        isOnePointZero : isOnePointZero,\r\n        isPercentage : isPercentage,\r\n        pad2 : pad2,\r\n        convertToPercentage : convertToPercentage,\r\n        convertHexToDecimal : convertHexToDecimal,\r\n        stringInputToObject : stringInputToObject\r\n\r\n    });\r\n\r\n    return colors;\r\n\r\n});\r\n\ndefine('skylark-utils-color/Color',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var inputToRGB = colors.inputToRGB,\r\n        rgbToRgb = colors.rgbToRgb,\r\n        rgbToHsl = colors.rgbToHsl,\r\n        hslToRgb = colors.hslToRgb,\r\n        rgbToHsv = colors.rgbToHsv,\r\n        rgbToHex = colors.rgbToHex,\r\n        rgbaToHex = colors.rgbaToHex,\r\n        boundAlpha = colors.boundAlpha,\r\n        bound01 = colors.bound01,\r\n        clamp01 = colors.clamp01,\r\n        parseIntFromHex = colors.parseIntFromHex,\r\n        isOnePointZero = colors.isOnePointZero,\r\n        isPercentage = colors.isPercentage,\r\n        pad2 = colors.pad2,\r\n        convertToPercentage = colors.convertToPercentage,\r\n        convertHexToDecimal = colors.convertHexToDecimal,\r\n        stringInputToObject = colors.stringInputToObject;\r\n\r\n    var tinyCounter = 0,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\tvar Color = colors.Color = langx.klass({\r\n\t\tinit : function(color, opts) {\r\n\t        color = (color) ? color : '';\r\n    \t    opts = opts || { };\r\n\r\n\t        // If input is already a Color, return itself\r\n\t        if (color instanceof Color) {\r\n\t           return color;\r\n\t        }\r\n\r\n\t        var rgb = inputToRGB(color);\r\n\t        this._originalInput = color,\r\n\t        this._r = rgb.r,\r\n\t        this._g = rgb.g,\r\n\t        this._b = rgb.b,\r\n\t        this._a = rgb.a,\r\n\t        this._roundA = mathRound(1000 * this._a) / 1000,\r\n\t        this._format = opts.format || rgb.format;\r\n\t        this._gradientType = opts.gradientType;\r\n\r\n\t        // Don't let the range of [0,255] come back in [0,1].\r\n\t        // Potentially lose a little bit of precision here, but will fix issues where\r\n\t        // .5 gets interpreted as half of the total, instead of half of 1\r\n\t        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n\t        if (this._r < 1) { this._r = mathRound(this._r); }\r\n\t        if (this._g < 1) { this._g = mathRound(this._g); }\r\n\t        if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n\t        this._ok = rgb.ok;\r\n\t        this._tc_id = tinyCounter++;\r\n\t    },\r\n\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n        isValid: function() {\r\n            return this._ok;\r\n        },\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n        toHsv: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n        toHsvString: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHsl: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n        toHslString: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHex: function(allow3Char) {\r\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n        toHex8: function() {\r\n            return rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\r\n              \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        _applyModification: function(fn, args) {\r\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\r\n            this._r = color._r;\r\n            this._g = color._g;\r\n            this._b = color._b;\r\n            this.setAlpha(color._a);\r\n            return this;\r\n        },\r\n        lighten: function() {\r\n            return this._applyModification(lighten, arguments);\r\n        },\r\n        brighten: function() {\r\n            return this._applyModification(brighten, arguments);\r\n        },\r\n        darken: function() {\r\n            return this._applyModification(darken, arguments);\r\n        },\r\n        desaturate: function() {\r\n            return this._applyModification(desaturate, arguments);\r\n        },\r\n        saturate: function() {\r\n            return this._applyModification(saturate, arguments);\r\n        },\r\n        greyscale: function() {\r\n            return this._applyModification(greyscale, arguments);\r\n        },\r\n        spin: function() {\r\n            return this._applyModification(spin, arguments);\r\n        },\r\n\r\n        _applyCombination: function(fn, args) {\r\n            return fn.apply(null, [this].concat([].slice.call(args)));\r\n        },\r\n        analogous: function() {\r\n            return this._applyCombination(analogous, arguments);\r\n        },\r\n        complement: function() {\r\n            return this._applyCombination(complement, arguments);\r\n        },\r\n        monochromatic: function() {\r\n            return this._applyCombination(monochromatic, arguments);\r\n        },\r\n        splitcomplement: function() {\r\n            return this._applyCombination(splitcomplement, arguments);\r\n        },\r\n        triad: function() {\r\n            return this._applyCombination(triad, arguments);\r\n        },\r\n        tetrad: function() {\r\n            return this._applyCombination(tetrad, arguments);\r\n        }\r\n\t});\r\n\r\n\r\n\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return Color(color, opts);\r\n    };\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        return Color(color1).toRgbString() == Color(color2).toRgbString();\r\n    };\r\n    \r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n   // Modification Functions\r\n    // ----------------------\r\n    // Thanks to less.js for some of the basics here\r\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n    function desaturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function saturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function greyscale(color) {\r\n        return Color(color).desaturate(100);\r\n    }\r\n\r\n    function lighten (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function brighten(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var rgb = Color(color).toRgb();\r\n        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n        return Color(rgb);\r\n    }\r\n\r\n    function darken (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n    // Values outside of this range will be wrapped into this range.\r\n    function spin(color, amount) {\r\n        var hsl = Color(color).toHsl();\r\n        var hue = (mathRound(hsl.h) + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Combination Functions\r\n    // ---------------------\r\n    // Thanks to jQuery xColor for some of the ideas behind these\r\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\r\n\r\n    function complement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return Color(hsl);\r\n    }\r\n\r\n    function triad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function tetrad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function splitcomplement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n            Color({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n        ];\r\n    }\r\n\r\n    function analogous(color, results, slices) {\r\n        results = results || 6;\r\n        slices = slices || 30;\r\n\r\n        var hsl = Color(color).toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [Color(color)];\r\n\r\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(Color(hsl));\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function monochromatic(color, results) {\r\n        results = results || 6;\r\n        var hsv = Color(color).toHsv();\r\n        var h = hsv.h, s = hsv.s, v = hsv.v;\r\n        var ret = [];\r\n        var modification = 1 / results;\r\n\r\n        while (results--) {\r\n            ret.push(Color({ h: h, s: s, v: v}));\r\n            v = (v + modification) % 1;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    // Utility Functions\r\n    // ---------------------\r\n\r\n    Color.mix = function(color1, color2, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n        var rgb1 = Color(color1).toRgb();\r\n        var rgb2 = Color(color2).toRgb();\r\n\r\n        var p = amount / 100;\r\n        var w = p * 2 - 1;\r\n        var a = rgb2.a - rgb1.a;\r\n\r\n        var w1;\r\n\r\n        if (w * a == -1) {\r\n            w1 = w;\r\n        } else {\r\n            w1 = (w + a) / (1 + w * a);\r\n        }\r\n\r\n        w1 = (w1 + 1) / 2;\r\n\r\n        var w2 = 1 - w1;\r\n\r\n        var rgba = {\r\n            r: rgb2.r * w1 + rgb1.r * w2,\r\n            g: rgb2.g * w1 + rgb1.g * w2,\r\n            b: rgb2.b * w1 + rgb1.b * w2,\r\n            a: rgb2.a * p  + rgb1.a * (1 - p)\r\n        };\r\n\r\n        return Color(rgba);\r\n    };\r\n\r\n\r\n    // Readability Functions\r\n    // ---------------------\r\n    // <http://www.w3.org/TR/AERT#color-contrast>\r\n\r\n    // `readability`\r\n    // Analyze the 2 colors and returns an object with the following properties:\r\n    //    `brightness`: difference in brightness between the two colors\r\n    //    `color`: difference in color/hue between the two colors\r\n    Color.readability = function(color1, color2) {\r\n        var c1 = Color(color1);\r\n        var c2 = Color(color2);\r\n        var rgb1 = c1.toRgb();\r\n        var rgb2 = c2.toRgb();\r\n        var brightnessA = c1.getBrightness();\r\n        var brightnessB = c2.getBrightness();\r\n        var colorDiff = (\r\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\r\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\r\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\r\n        );\r\n\r\n        return {\r\n            brightness: Math.abs(brightnessA - brightnessB),\r\n            color: colorDiff\r\n        };\r\n    };\r\n\r\n    // `readable`\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    // Ensure that foreground and background color combinations provide sufficient contrast.\r\n    // *Example*\r\n    //    Color.isReadable(\"#000\", \"#111\") => false\r\n    Color.isReadable = function(color1, color2) {\r\n        var readability = Color.readability(color1, color2);\r\n        return readability.brightness > 125 && readability.color > 500;\r\n    };\r\n\r\n    // `mostReadable`\r\n    // Given a base color and a list of possible foreground or background\r\n    // colors for that base, returns the most readable color.\r\n    // *Example*\r\n    //    Color.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\r\n    Color.mostReadable = function(baseColor, colorList) {\r\n        var bestColor = null;\r\n        var bestScore = 0;\r\n        var bestIsReadable = false;\r\n        for (var i=0; i < colorList.length; i++) {\r\n\r\n            // We normalize both around the \"acceptable\" breaking point,\r\n            // but rank brightness constrast higher than hue.\r\n\r\n            var readability = Color.readability(baseColor, colorList[i]);\r\n            var readable = readability.brightness > 125 && readability.color > 500;\r\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\r\n\r\n            if ((readable && ! bestIsReadable) ||\r\n                (readable && bestIsReadable && score > bestScore) ||\r\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\r\n                bestIsReadable = readable;\r\n                bestScore = score;\r\n                bestColor = Color(colorList[i]);\r\n            }\r\n        }\r\n        return bestColor;\r\n    };\r\n\r\n\r\n\treturn Color;\r\n});\r\n\n define('skylark-utils-color/names',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n    // Big List of Colors\r\n    // ------------------\r\n    // <http://www.w3.org/TR/css3-color/#svg-color>\r\n    var names = colors.names = {\r\n        aliceblue: \"f0f8ff\",\r\n        antiquewhite: \"faebd7\",\r\n        aqua: \"0ff\",\r\n        aquamarine: \"7fffd4\",\r\n        azure: \"f0ffff\",\r\n        beige: \"f5f5dc\",\r\n        bisque: \"ffe4c4\",\r\n        black: \"000\",\r\n        blanchedalmond: \"ffebcd\",\r\n        blue: \"00f\",\r\n        blueviolet: \"8a2be2\",\r\n        brown: \"a52a2a\",\r\n        burlywood: \"deb887\",\r\n        burntsienna: \"ea7e5d\",\r\n        cadetblue: \"5f9ea0\",\r\n        chartreuse: \"7fff00\",\r\n        chocolate: \"d2691e\",\r\n        coral: \"ff7f50\",\r\n        cornflowerblue: \"6495ed\",\r\n        cornsilk: \"fff8dc\",\r\n        crimson: \"dc143c\",\r\n        cyan: \"0ff\",\r\n        darkblue: \"00008b\",\r\n        darkcyan: \"008b8b\",\r\n        darkgoldenrod: \"b8860b\",\r\n        darkgray: \"a9a9a9\",\r\n        darkgreen: \"006400\",\r\n        darkgrey: \"a9a9a9\",\r\n        darkkhaki: \"bdb76b\",\r\n        darkmagenta: \"8b008b\",\r\n        darkolivegreen: \"556b2f\",\r\n        darkorange: \"ff8c00\",\r\n        darkorchid: \"9932cc\",\r\n        darkred: \"8b0000\",\r\n        darksalmon: \"e9967a\",\r\n        darkseagreen: \"8fbc8f\",\r\n        darkslateblue: \"483d8b\",\r\n        darkslategray: \"2f4f4f\",\r\n        darkslategrey: \"2f4f4f\",\r\n        darkturquoise: \"00ced1\",\r\n        darkviolet: \"9400d3\",\r\n        deeppink: \"ff1493\",\r\n        deepskyblue: \"00bfff\",\r\n        dimgray: \"696969\",\r\n        dimgrey: \"696969\",\r\n        dodgerblue: \"1e90ff\",\r\n        firebrick: \"b22222\",\r\n        floralwhite: \"fffaf0\",\r\n        forestgreen: \"228b22\",\r\n        fuchsia: \"f0f\",\r\n        gainsboro: \"dcdcdc\",\r\n        ghostwhite: \"f8f8ff\",\r\n        gold: \"ffd700\",\r\n        goldenrod: \"daa520\",\r\n        gray: \"808080\",\r\n        green: \"008000\",\r\n        greenyellow: \"adff2f\",\r\n        grey: \"808080\",\r\n        honeydew: \"f0fff0\",\r\n        hotpink: \"ff69b4\",\r\n        indianred: \"cd5c5c\",\r\n        indigo: \"4b0082\",\r\n        ivory: \"fffff0\",\r\n        khaki: \"f0e68c\",\r\n        lavender: \"e6e6fa\",\r\n        lavenderblush: \"fff0f5\",\r\n        lawngreen: \"7cfc00\",\r\n        lemonchiffon: \"fffacd\",\r\n        lightblue: \"add8e6\",\r\n        lightcoral: \"f08080\",\r\n        lightcyan: \"e0ffff\",\r\n        lightgoldenrodyellow: \"fafad2\",\r\n        lightgray: \"d3d3d3\",\r\n        lightgreen: \"90ee90\",\r\n        lightgrey: \"d3d3d3\",\r\n        lightpink: \"ffb6c1\",\r\n        lightsalmon: \"ffa07a\",\r\n        lightseagreen: \"20b2aa\",\r\n        lightskyblue: \"87cefa\",\r\n        lightslategray: \"789\",\r\n        lightslategrey: \"789\",\r\n        lightsteelblue: \"b0c4de\",\r\n        lightyellow: \"ffffe0\",\r\n        lime: \"0f0\",\r\n        limegreen: \"32cd32\",\r\n        linen: \"faf0e6\",\r\n        magenta: \"f0f\",\r\n        maroon: \"800000\",\r\n        mediumaquamarine: \"66cdaa\",\r\n        mediumblue: \"0000cd\",\r\n        mediumorchid: \"ba55d3\",\r\n        mediumpurple: \"9370db\",\r\n        mediumseagreen: \"3cb371\",\r\n        mediumslateblue: \"7b68ee\",\r\n        mediumspringgreen: \"00fa9a\",\r\n        mediumturquoise: \"48d1cc\",\r\n        mediumvioletred: \"c71585\",\r\n        midnightblue: \"191970\",\r\n        mintcream: \"f5fffa\",\r\n        mistyrose: \"ffe4e1\",\r\n        moccasin: \"ffe4b5\",\r\n        navajowhite: \"ffdead\",\r\n        navy: \"000080\",\r\n        oldlace: \"fdf5e6\",\r\n        olive: \"808000\",\r\n        olivedrab: \"6b8e23\",\r\n        orange: \"ffa500\",\r\n        orangered: \"ff4500\",\r\n        orchid: \"da70d6\",\r\n        palegoldenrod: \"eee8aa\",\r\n        palegreen: \"98fb98\",\r\n        paleturquoise: \"afeeee\",\r\n        palevioletred: \"db7093\",\r\n        papayawhip: \"ffefd5\",\r\n        peachpuff: \"ffdab9\",\r\n        peru: \"cd853f\",\r\n        pink: \"ffc0cb\",\r\n        plum: \"dda0dd\",\r\n        powderblue: \"b0e0e6\",\r\n        purple: \"800080\",\r\n        rebeccapurple: \"663399\",\r\n        red: \"f00\",\r\n        rosybrown: \"bc8f8f\",\r\n        royalblue: \"4169e1\",\r\n        saddlebrown: \"8b4513\",\r\n        salmon: \"fa8072\",\r\n        sandybrown: \"f4a460\",\r\n        seagreen: \"2e8b57\",\r\n        seashell: \"fff5ee\",\r\n        sienna: \"a0522d\",\r\n        silver: \"c0c0c0\",\r\n        skyblue: \"87ceeb\",\r\n        slateblue: \"6a5acd\",\r\n        slategray: \"708090\",\r\n        slategrey: \"708090\",\r\n        snow: \"fffafa\",\r\n        springgreen: \"00ff7f\",\r\n        steelblue: \"4682b4\",\r\n        tan: \"d2b48c\",\r\n        teal: \"008080\",\r\n        thistle: \"d8bfd8\",\r\n        tomato: \"ff6347\",\r\n        turquoise: \"40e0d0\",\r\n        violet: \"ee82ee\",\r\n        wheat: \"f5deb3\",\r\n        white: \"fff\",\r\n        whitesmoke: \"f5f5f5\",\r\n        yellow: \"ff0\",\r\n        yellowgreen: \"9acd32\"\r\n    };\r\n\r\n    return names;\r\n\r\n});\r\n\r\n\ndefine('skylark-utils-color/hexNames',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\",\r\n    \"./names\"\r\n],function(langx,colors,names) {\r\n\r\n    // Make it easy to access colors via `hexNames[hex]`\r\n    var hexNames = colors.hexNames = flip(names);\r\n\r\n\r\n    // Utilities\r\n    // ---------\r\n\r\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\r\n    function flip(o) {\r\n        var flipped = { };\r\n        for (var i in o) {\r\n            if (o.hasOwnProperty(i)) {\r\n                flipped[o[i]] = i;\r\n            }\r\n        }\r\n        return flipped;\r\n    }\r\n\r\n    return hexNames;\r\n\r\n});\ndefine('skylark-utils-color/main',[\r\n    \"./colors\",\r\n    \"./Color\",\r\n    \"./hexNames\",\r\n    \"./names\"\r\n], function(colors) {\r\n\r\n\treturn colors;\r\n});\ndefine('skylark-utils-color', ['skylark-utils-color/main'], function (main) { return main; });\n\n"]}