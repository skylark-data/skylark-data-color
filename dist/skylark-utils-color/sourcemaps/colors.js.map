{"version":3,"sources":["colors.js"],"names":["define","skylark","langx","inputToRGB","color","rgb","r","g","b","a","ok","format","stringInputToObject","hasOwnProperty","rgbToRgb","String","substr","s","convertToPercentage","v","hsvToRgb","h","l","hslToRgb","boundAlpha","mathMin","mathMax","bound01","rgbToHsl","max","min","d","hue2rgb","p","q","t","rgbToHsv","i","math","floor","f","mod","rgbToHex","allow3Char","hex","pad2","mathRound","toString","charAt","join","rgbaToHex","convertDecimalToHex","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","clamp01","val","parseIntFromHex","indexOf","c","length","Math","round","convertHexToDecimal","replace","trimLeft","trimRight","toLowerCase","named","names","match","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","hex6","hex3","colors","random","CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","mixin"],"mappings":"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","file":"../colors.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n],function(skylark,langx) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var colors = skylark.colors =  skylark.colors || {};\r\n\r\n    var trimLeft = /^[\\s,#]+/,\r\n        trimRight = /\\s+$/,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    function inputToRGB(color) {\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = stringInputToObject(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb = hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        a = boundAlpha(a);\r\n\r\n        return {\r\n            ok: ok,\r\n            format: color.format || format,\r\n            r: mathMin(255, mathMax(rgb.r, 0)),\r\n            g: mathMin(255, mathMax(rgb.g, 0)),\r\n            b: mathMin(255, mathMax(rgb.b, 0)),\r\n            a: a\r\n        };\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n    // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function stringInputToObject(color) {\r\n\r\n        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    langx.mixin(colors,{\r\n        inputToRGB : inputToRGB,\r\n        rgbToRgb : rgbToRgb,\r\n        rgbToHsl : rgbToHsl,\r\n        hslToRgb : hslToRgb,\r\n        rgbToHsv : rgbToHsv,\r\n        rgbToHex : rgbToHex,\r\n        rgbaToHex : rgbaToHex,\r\n        boundAlpha : boundAlpha,\r\n        bound01 : bound01,\r\n        clamp01 : clamp01,\r\n        parseIntFromHex : parseIntFromHex,\r\n        isOnePointZero : isOnePointZero,\r\n        isPercentage : isPercentage,\r\n        pad2 : pad2,\r\n        convertToPercentage : convertToPercentage,\r\n        convertHexToDecimal : convertHexToDecimal,\r\n        stringInputToObject : stringInputToObject\r\n\r\n    });\r\n\r\n    return colors;\r\n\r\n});\r\n"]}