{"version":3,"sources":["Color.js"],"names":["define","langx","colors","desaturate","color","amount","hsl","Color","toHsl","s","clamp01","saturate","greyscale","lighten","l","brighten","rgb","toRgb","r","mathMax","mathMin","mathRound","g","b","darken","spin","hue","h","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","push","monochromatic","hsv","toHsv","v","modification","inputToRGB","rgbToHsl","rgbToRgb","rgbToHsv","hslToRgb","rgbToHex","rgbaToHex","boundAlpha","bound01","convertToPercentage","parseIntFromHex","isOnePointZero","isPercentage","pad2","hexNames","convertHexToDecimal","stringInputToObject","tinyCounter","math","Math","round","min","max","mathRandom","random","klass","init","opts","this","_originalInput","_r","_g","_b","_a","a","_roundA","_format","format","_gradientType","gradientType","_ok","ok","_tc_id","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","setAlpha","value","toHsvString","toHslString","toHex","allow3Char","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","toString","formatSet","formattedString","hasAlpha","needsAlphaFormat","_applyModification","fn","args","apply","concat","slice","call","arguments","_applyCombination","fromRatio","newColor","i","hasOwnProperty","equals","color1","color2","mix","w1","rgb1","rgb2","p","w","w2","rgba","readability","c1","c2","brightnessA","brightnessB","colorDiff","brightness","abs","isReadable","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","length","readable","score"],"mappings":"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","file":"../Color.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var inputToRGB = colors.inputToRGB,\r\n        rgbToRgb = colors.rgbToRgb,\r\n        rgbToHsl = colors.rgbToHsl,\r\n        hslToRgb = colors.hslToRgb,\r\n        rgbToHsv = colors.rgbToHsv,\r\n        rgbToHex = colors.rgbToHex,\r\n        rgbaToHex = colors.rgbaToHex,\r\n        boundAlpha = colors.boundAlpha,\r\n        bound01 = colors.bound01,\r\n        clamp01 = colors.clamp01,\r\n        parseIntFromHex = colors.parseIntFromHex,\r\n        isOnePointZero = colors.isOnePointZero,\r\n        isPercentage = colors.isPercentage,\r\n        pad2 = colors.pad2,\r\n        convertToPercentage = colors.convertToPercentage,\r\n        convertHexToDecimal = colors.convertHexToDecimal,\r\n        stringInputToObject = colors.stringInputToObject,\r\n        hexNames = colors.hexNames;\r\n\r\n    var tinyCounter = 0,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\tvar Color = colors.Color = langx.klass({\r\n\t\tinit : function(color, opts) {\r\n\t        color = (color) ? color : '';\r\n    \t    opts = opts || { };\r\n\r\n\t        // If input is already a Color, return itself\r\n\t        if (color instanceof Color) {\r\n\t           return color;\r\n\t        }\r\n\r\n\t        var rgb = inputToRGB(color);\r\n\t        this._originalInput = color,\r\n\t        this._r = rgb.r,\r\n\t        this._g = rgb.g,\r\n\t        this._b = rgb.b,\r\n\t        this._a = rgb.a,\r\n\t        this._roundA = mathRound(1000 * this._a) / 1000,\r\n\t        this._format = opts.format || rgb.format;\r\n\t        this._gradientType = opts.gradientType;\r\n\r\n\t        // Don't let the range of [0,255] come back in [0,1].\r\n\t        // Potentially lose a little bit of precision here, but will fix issues where\r\n\t        // .5 gets interpreted as half of the total, instead of half of 1\r\n\t        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n\t        if (this._r < 1) { this._r = mathRound(this._r); }\r\n\t        if (this._g < 1) { this._g = mathRound(this._g); }\r\n\t        if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n\t        this._ok = rgb.ok;\r\n\t        this._tc_id = tinyCounter++;\r\n\t    },\r\n\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n        isValid: function() {\r\n            return this._ok;\r\n        },\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n        toHsv: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n        toHsvString: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHsl: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n        toHslString: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHex: function(allow3Char) {\r\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n        toHex8: function() {\r\n            return rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\r\n              \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        _applyModification: function(fn, args) {\r\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\r\n            this._r = color._r;\r\n            this._g = color._g;\r\n            this._b = color._b;\r\n            this.setAlpha(color._a);\r\n            return this;\r\n        },\r\n        lighten: function() {\r\n            return this._applyModification(lighten, arguments);\r\n        },\r\n        brighten: function() {\r\n            return this._applyModification(brighten, arguments);\r\n        },\r\n        darken: function() {\r\n            return this._applyModification(darken, arguments);\r\n        },\r\n        desaturate: function() {\r\n            return this._applyModification(desaturate, arguments);\r\n        },\r\n        saturate: function() {\r\n            return this._applyModification(saturate, arguments);\r\n        },\r\n        greyscale: function() {\r\n            return this._applyModification(greyscale, arguments);\r\n        },\r\n        spin: function() {\r\n            return this._applyModification(spin, arguments);\r\n        },\r\n\r\n        _applyCombination: function(fn, args) {\r\n            return fn.apply(null, [this].concat([].slice.call(args)));\r\n        },\r\n        analogous: function() {\r\n            return this._applyCombination(analogous, arguments);\r\n        },\r\n        complement: function() {\r\n            return this._applyCombination(complement, arguments);\r\n        },\r\n        monochromatic: function() {\r\n            return this._applyCombination(monochromatic, arguments);\r\n        },\r\n        splitcomplement: function() {\r\n            return this._applyCombination(splitcomplement, arguments);\r\n        },\r\n        triad: function() {\r\n            return this._applyCombination(triad, arguments);\r\n        },\r\n        tetrad: function() {\r\n            return this._applyCombination(tetrad, arguments);\r\n        }\r\n\t});\r\n\r\n\r\n\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return Color(color, opts);\r\n    };\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        return Color(color1).toRgbString() == Color(color2).toRgbString();\r\n    };\r\n    \r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n   // Modification Functions\r\n    // ----------------------\r\n    // Thanks to less.js for some of the basics here\r\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n    function desaturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function saturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function greyscale(color) {\r\n        return Color(color).desaturate(100);\r\n    }\r\n\r\n    function lighten (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function brighten(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var rgb = Color(color).toRgb();\r\n        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n        return Color(rgb);\r\n    }\r\n\r\n    function darken (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n    // Values outside of this range will be wrapped into this range.\r\n    function spin(color, amount) {\r\n        var hsl = Color(color).toHsl();\r\n        var hue = (mathRound(hsl.h) + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Combination Functions\r\n    // ---------------------\r\n    // Thanks to jQuery xColor for some of the ideas behind these\r\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\r\n\r\n    function complement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return Color(hsl);\r\n    }\r\n\r\n    function triad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function tetrad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function splitcomplement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n            Color({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n        ];\r\n    }\r\n\r\n    function analogous(color, results, slices) {\r\n        results = results || 6;\r\n        slices = slices || 30;\r\n\r\n        var hsl = Color(color).toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [Color(color)];\r\n\r\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(Color(hsl));\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function monochromatic(color, results) {\r\n        results = results || 6;\r\n        var hsv = Color(color).toHsv();\r\n        var h = hsv.h, s = hsv.s, v = hsv.v;\r\n        var ret = [];\r\n        var modification = 1 / results;\r\n\r\n        while (results--) {\r\n            ret.push(Color({ h: h, s: s, v: v}));\r\n            v = (v + modification) % 1;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    // Utility Functions\r\n    // ---------------------\r\n\r\n    Color.mix = function(color1, color2, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n        var rgb1 = Color(color1).toRgb();\r\n        var rgb2 = Color(color2).toRgb();\r\n\r\n        var p = amount / 100;\r\n        var w = p * 2 - 1;\r\n        var a = rgb2.a - rgb1.a;\r\n\r\n        var w1;\r\n\r\n        if (w * a == -1) {\r\n            w1 = w;\r\n        } else {\r\n            w1 = (w + a) / (1 + w * a);\r\n        }\r\n\r\n        w1 = (w1 + 1) / 2;\r\n\r\n        var w2 = 1 - w1;\r\n\r\n        var rgba = {\r\n            r: rgb2.r * w1 + rgb1.r * w2,\r\n            g: rgb2.g * w1 + rgb1.g * w2,\r\n            b: rgb2.b * w1 + rgb1.b * w2,\r\n            a: rgb2.a * p  + rgb1.a * (1 - p)\r\n        };\r\n\r\n        return Color(rgba);\r\n    };\r\n\r\n\r\n    // Readability Functions\r\n    // ---------------------\r\n    // <http://www.w3.org/TR/AERT#color-contrast>\r\n\r\n    // `readability`\r\n    // Analyze the 2 colors and returns an object with the following properties:\r\n    //    `brightness`: difference in brightness between the two colors\r\n    //    `color`: difference in color/hue between the two colors\r\n    Color.readability = function(color1, color2) {\r\n        var c1 = Color(color1);\r\n        var c2 = Color(color2);\r\n        var rgb1 = c1.toRgb();\r\n        var rgb2 = c2.toRgb();\r\n        var brightnessA = c1.getBrightness();\r\n        var brightnessB = c2.getBrightness();\r\n        var colorDiff = (\r\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\r\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\r\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\r\n        );\r\n\r\n        return {\r\n            brightness: Math.abs(brightnessA - brightnessB),\r\n            color: colorDiff\r\n        };\r\n    };\r\n\r\n    // `readable`\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    // Ensure that foreground and background color combinations provide sufficient contrast.\r\n    // *Example*\r\n    //    Color.isReadable(\"#000\", \"#111\") => false\r\n    Color.isReadable = function(color1, color2) {\r\n        var readability = Color.readability(color1, color2);\r\n        return readability.brightness > 125 && readability.color > 500;\r\n    };\r\n\r\n    // `mostReadable`\r\n    // Given a base color and a list of possible foreground or background\r\n    // colors for that base, returns the most readable color.\r\n    // *Example*\r\n    //    Color.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\r\n    Color.mostReadable = function(baseColor, colorList) {\r\n        var bestColor = null;\r\n        var bestScore = 0;\r\n        var bestIsReadable = false;\r\n        for (var i=0; i < colorList.length; i++) {\r\n\r\n            // We normalize both around the \"acceptable\" breaking point,\r\n            // but rank brightness constrast higher than hue.\r\n\r\n            var readability = Color.readability(baseColor, colorList[i]);\r\n            var readable = readability.brightness > 125 && readability.color > 500;\r\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\r\n\r\n            if ((readable && ! bestIsReadable) ||\r\n                (readable && bestIsReadable && score > bestScore) ||\r\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\r\n                bestIsReadable = readable;\r\n                bestScore = score;\r\n                bestColor = Color(colorList[i]);\r\n            }\r\n        }\r\n        return bestColor;\r\n    };\r\n\r\n\r\n\treturn Color;\r\n});\r\n"]}