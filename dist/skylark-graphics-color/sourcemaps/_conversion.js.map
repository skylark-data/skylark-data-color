{"version":3,"sources":["_conversion.js"],"names":["define","math","Math","mathRound","round","mathMin","min","mathMax","max","random","pad2","c","length","bound01","n","indexOf","parseFloat","isOnePointZero","processPercent","isPercentage","parseInt","abs","rgbToRgb","r","g","b","rgbToHsl","h","s","l","d","hslToRgb","hue2rgb","p","q","t","rgbToHsv","v","hsvToRgb","i","floor","f","mod","rgbToHex","allow3Char","hex","toString","charAt","join","rgbaToHex","a","convertDecimalToHex","hexToRgb","result","exec"],"mappings":"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","file":"../_conversion.js","sourcesContent":["define([\r\n],function(\r\n){\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n            \r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\tfunction hexToRgb(hex) {\r\n\t  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\t  return result ? {\r\n\t    r: parseInt(result[1], 16),\r\n\t    g: parseInt(result[2], 16),\r\n\t    b: parseInt(result[3], 16)\r\n\t  } : null;\r\n\t}\r\n\r\n\treturn  {\r\n\t\tbound01,\r\n        rgbToRgb,\r\n\t\trgbToHsl,\r\n\t\thslToRgb,\r\n\t\trgbToHsv,\r\n\t\thsvToRgb,\r\n\t\trgbToHex,\r\n\t\trgbaToHex,\r\n\t\thexToRgb\r\n\t};\r\n});"]}