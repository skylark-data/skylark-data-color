{"version":3,"sources":["Color.js"],"names":["define","skylark","langx","klass","names","hexNames","conversion","math","Math","mathRound","round","mathMin","min","mathMax","max","mathRandom","random","clamp01","val","Color","init","rgb","opts","types","isString","hexToRgb","this","_r","r","_g","g","_b","b","_a","isDefined","a","_roundA","_format","format","_gradientType","gradientType","isDark","getBrightness","isLight","getOriginalInput","_originalInput","getFormat","getAlpha","toRgb","setAlpha","value","parseFloat","isNaN","toHsv","hsv","rgbToHsv","h","s","v","toHsvString","toHsl","hsl","rgbToHsl","l","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","bound01","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","toString","formatSet","formattedString","hasAlpha","lighten","amount","fromHsl","brighten","darken","desaturate","saturate","greyscale","spin","hue","analogous","results","slices","part","ret","push","complement","monochromatic","modification","fromHsv","splitcomplement","triad","tetrad","mix","color2","w1","rgb1","rgb2","p","w","w2","rgba","equals","color1","fromRatio","fromRgba","fromRgb","hslToRgb","hsvToRgb","attach"],"mappings":"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","file":"../Color.js","sourcesContent":["define([\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-klass\",\r\n    \"./_names\",\r\n    \"./_hexNames\",\r\n    \"./_conversion\"\r\n],function(\r\n    skylark,\r\n    langx,\r\n    klass,\r\n    names,\r\n    hexNames,\r\n    conversion\r\n) {\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n     // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n         \r\n\tvar Color = klass({\r\n\t\tinit : function(rgb, opts) {\r\n    \t    opts = opts || { };\r\n\r\n\t        //var rgb = inputToRGB(color);\r\n            //\r\n\t        //this._originalInput = color,\r\n            if (types.isString(rgb)) {\r\n                rgb= conversion.hexToRgb(rgb);\r\n            }\r\n\t        this._r = rgb.r,\r\n\t        this._g = rgb.g,\r\n\t        this._b = rgb.b,\r\n\t        this._a = types.isDefined(rgb.a) ? rgb.a : 1,\r\n\r\n\t        this._roundA = mathRound(1000 * this._a) / 1000,\r\n\t        this._format = opts.format || rgb.format;\r\n\t        this._gradientType = opts.gradientType;\r\n\r\n\t        // Don't let the range of [0,255] come back in [0,1].\r\n\t        // Potentially lose a little bit of precision here, but will fix issues where\r\n\t        // .5 gets interpreted as half of the total, instead of half of 1\r\n\t        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n\t        if (this._r < 1) { this._r = mathRound(this._r); }\r\n\t        if (this._g < 1) { this._g = mathRound(this._g); }\r\n\t        if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n\t    },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is dark.\r\n         */\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is light.\r\n         */\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n\r\n        /*\r\n         * Returns the alpha value of a color, from 0-1\r\n         */\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n\r\n        /*\r\n         * Returns the perceived brightness of a color, from 0-255.\r\n         */\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n\r\n        /*\r\n         * Sets the alpha value on a current color. Accepted range is in between 0-1.\r\n         */\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n\r\n        toHsv: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n\r\n        toHsvString: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHsl: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n\r\n        toHslString: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHex: function(allow3Char) {\r\n            return conversion.rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n\r\n        toHex8: function() {\r\n            return conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(conversion.bound01(this._r, 255) * 100) + \"%\", g: mathRound(conversion.bound01(this._g, 255) * 100) + \"%\", b: mathRound(conversion.bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%)\" :\r\n              \r\n              \"rgba(\" + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        // modification methods\r\n        // ----------------------\r\n        // Thanks to less.js for some of the basics here\r\n        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n        /*\r\n         * Lighten the color a given amount, from 0 to 100. Providing 100 will always return white.\r\n         */\r\n        lighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l += amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Brighten the color a given amount, from 0 to 100\r\n         */\r\n        brighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var rgb = this.toRgb();\r\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n            return new Color(rgb);\r\n        },\r\n\r\n        /*\r\n         * Darken the color a given amount, from 0 to 100. Providing 100 will always return black.\r\n         */\r\n        darken: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l -= amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale.\r\n         */\r\n        desaturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s -= amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Saturate the color a given amount, from 0 to 100.\r\n         */\r\n        saturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s += amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Completely desaturates a color into greyscale. Same as calling desaturate(100).\r\n         */\r\n        greyscale: function() {\r\n            return this.desaturate(100);\r\n        },\r\n\r\n        /*\r\n         * Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing (since it sets the hue back to what it was before).\r\n         */\r\n        spin: function(amount) {\r\n            var hsl = this.toHsl();\r\n            var hue = (mathRound(hsl.h) + amount) % 360;\r\n            hsl.h = hue < 0 ? 360 + hue : hue;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n\r\n        // combination methods\r\n\r\n        /*\r\n         * Finds analogous colors the color.\r\n         */\r\n        analogous: function(results, slices) {\r\n            results = results || 6;\r\n            slices = slices || 30;\r\n\r\n            var hsl = this.toHsl();\r\n            var part = 360 / slices;\r\n            var ret = [this];\r\n\r\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n                hsl.h = (hsl.h + part) % 360;\r\n                ret.push(Color.fromHsl(hsl));\r\n            }\r\n            return ret;\r\n        },\r\n\r\n        complement: function() {\r\n            var hsl = this.toHsl();\r\n            hsl.h = (hsl.h + 180) % 360;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Finds monochromatic colors to the color.\r\n         */\r\n        monochromatic: function(results) {\r\n            results = results || 6;\r\n            var hsv = this.toHsv();\r\n            var h = hsv.h, s = hsv.s, v = hsv.v;\r\n            var ret = [];\r\n            var modification = 1 / results;\r\n\r\n            while (results--) {\r\n                ret.push(Color.fromHsv({ h: h, s: s, v: v}));\r\n                v = (v + modification) % 1;\r\n            }\r\n\r\n            return ret;\r\n        },\r\n\r\n\r\n        /*\r\n         * Generates a split complements of the color.\r\n         */\r\n        splitcomplement: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n                Color.fromHsl({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n            ];\r\n        },\r\n\r\n        /*\r\n         * Generates a color triad of the color.\r\n         */\r\n        triad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n        tetrad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n\r\n        mix : function(color2,amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n            var rgb1 = this.toRgb();\r\n            var rgb2 = color2.toRgb();\r\n\r\n            var p = amount / 100;\r\n            var w = p * 2 - 1;\r\n            var a = rgb2.a - rgb1.a;\r\n\r\n            var w1;\r\n\r\n            if (w * a == -1) {\r\n                w1 = w;\r\n            } else {\r\n                w1 = (w + a) / (1 + w * a);\r\n            }\r\n\r\n            w1 = (w1 + 1) / 2;\r\n\r\n            var w2 = 1 - w1;\r\n\r\n            var rgba = {\r\n                r: rgb2.r * w1 + rgb1.r * w2,\r\n                g: rgb2.g * w1 + rgb1.g * w2,\r\n                b: rgb2.b * w1 + rgb1.b * w2,\r\n                a: rgb2.a * p  + rgb1.a * (1 - p)\r\n            };\r\n\r\n            return new Color(rgba);\r\n\r\n        }\r\n\t});\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        return color1.toRgbString() == color2.toRgbString();\r\n    };\r\n    \r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n    Color.fromRgba = function(r,g,b,a) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b,\r\n            a\r\n        })  \r\n    };\r\n\r\n    Color.fromRgb = function(r,g,b) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b\r\n        })  \r\n    };\r\n\r\n    Color.fromHsl = function(h,s,l) {\r\n        var rgb = conversion.hslToRgb(h,s,l)\r\n        return new Color(rgb)  \r\n    };\r\n\r\n    Color.fromHsv = function(h,s,v) {\r\n        var rgb = conversion.hsvToRgb(h,s,v)\r\n        return new Color(rgb)  \r\n    }; \r\n\r\n    return skylark.attach(\"graphics.Color\",Color);\r\n});\r\n"]}