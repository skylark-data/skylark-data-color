{"version":3,"sources":["parse.js"],"names":["define","strings","Color","names","conversion","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","math","Math","mathMin","round","min","mathMax","max","matchers","random","rgb","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex8","hex3s","hex6s","hex8s","convertToPercentage","n","parseIntFromHex","val","parseInt","stringInputToObject","color","trim","toLowerCase","match","h","named","r","g","b","a","format","exec","s","l","v","parse","ok","hasOwnProperty","rgbToRgb","String","substr","hsvToRgb","hslToRgb"],"mappings":"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","file":"../parse.js","sourcesContent":["define([\r\n    \"skylark-langx-strings\",\r\n    \"./Color\",\r\n    \"./_names\",\r\n    \"./_conversion\"\r\n],function(\r\n    strings,\r\n    Color,\r\n    names,\r\n    conversion\r\n){\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex3s: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n        \r\n\r\n      // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n          \r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function stringInputToObject(color) {\r\n\r\n        color = strings.trim(color).toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color)) || (match = matchers.hex8s.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color)) || (match = matchers.hex6s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color)) || (match = matchers.hex3s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    function parse(color) {\r\n        if (color instanceof Color) {\r\n            return color;\r\n        }\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = stringInputToObject(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = conversion.rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = conversion.hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb =  conversion.hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n\r\n        return new Color(\r\n            {\r\n                ok: ok,\r\n                r: mathMin(255, mathMax(rgb.r, 0)),\r\n                g: mathMin(255, mathMax(rgb.g, 0)),\r\n                b: mathMin(255, mathMax(rgb.b, 0)),\r\n                a: a\r\n            },\r\n            {\r\n                format: color.format || format,                \r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    /*\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return new Color(color, opts);\r\n    };\r\n    */\r\n\r\n    return Color.parse = parse;\r\n\t\r\n});"]}